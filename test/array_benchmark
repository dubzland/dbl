#!/usr/bin/env bash

source "./lib/dbl.sh"

function _msg() {
  [[ $quiet -eq 1 ]] && return
  printf "$1" "${@:2}"
}

function execute_array_contains() {
  $Array.new arr
  local -n arr__ref="$arr"
  local -n raw__ref="${arr__ref[_raw]}"
  raw__ref=(one two three four five six seven eight nine ten)
  ${!arr}.contains three || return 1
  ${!arr}.contains eleven && return 1
  return 0
}

function execute_array_push() {
  $Array.new arr
  ${!arr}.push 'foo' || return 1
  return 0
}

function execute_Array_is_array() {
  declare -a myarr
  myarr=()
  $Array.is_array myarr || return 1
  $Array.is_array notarray && return 1
  return 0
}

declare -A array_samples
array_samples=(
  ['array#contains']=execute_array_contains
  ['array#push']=execute_array_push
  ['Array.is_array']=execute_Array_is_array
)

function run_sample() {
  _msg ">>> %s <<<\n" "$1"
  for (( i=0; i<$2; i++)); do
    if ! ${array_samples[$1]}; then
      _msg "\r\033[KFAILED!\n"
      return 1
    fi
    [[ $((i%10)) -eq 0 ]] && _msg "\r%d iterations complete." "$i"
  done
  _msg "\r\033[K"
}

function run_samples() {
  local count=$1
  local -a samples=("${@:2}")

  for sample in "${samples[@]}"; do
    if [[ $quiet -eq 1 ]]; then
      run_sample "${sample}" $count
    else
      time run_sample "${sample}" $count
    fi
    _msg "\n\n"
  done
}

declare -i quiet
quiet=0

declare -i count
count=1000

# Option parsing
while getopts qc: opt
do
  case "$opt" in
    q) quiet=1 ;;
    c) count=$OPTARG ;;
    \?) echo 'No arguments supplied'; exit 1 ;;
  esac
done

shift $((OPTIND-1))

declare -a benchmark_samples
if [[ $# -gt 0 ]]; then
  benchmark_samples=("$@")
else
  benchmark_samples=("${!array_samples[@]}")
fi

_msg "STARTING BENCHMARK WITH %d iterations...\n" $count

run_samples $count "${benchmark_samples[@]}"

# vim: ts=2:sw=2:expandtab
